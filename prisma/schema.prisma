generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DB_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        Int             @id @default(autoincrement()) @db.UnsignedInt
  username  String          @db.VarChar(64)
  email     String          @unique
  password  String          @db.LongText
  avatarUrl String?         @db.Text
  createdAt DateTime        @default(now())
  posts     Post[]
  bio       String?         @db.VarChar(255)
  guilds    Guild[]
  googleUID String?         @db.VarChar(2048)
  archived  Boolean         @default(false)
  online    Boolean         @default(false)
  friends   Relationships[]
}

enum RelationshipType {
  friend
  shared
  blocked
  pendingSender
  pendingReceiver
}

model Relationships {
  id       Int  @id @default(autoincrement()) @db.UnsignedInt
  userId   Int  @db.UnsignedInt
  user     User @relation(fields: [userId], references: [id])
  friendId Int  @db.UnsignedInt
  type     RelationshipType

  @@index(userId)
}

model Post {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?  @db.LongText
  published Boolean  @default(false)
  authorId  Int      @db.UnsignedInt
  author    User     @relation(fields: [authorId], references: [id])

  @@index(authorId)
}

model Member {
  id      BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  userId  Int    @db.UnsignedInt
  guildId Int    @db.UnsignedInt
  guild   Guild  @relation(fields: [guildId], references: [id])
}

model Guild {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  channels  Channel[]
  ownerId   Int       @db.UnsignedInt
  owner     User      @relation(fields: [ownerId], references: [id])
  name      String    @db.VarChar(64)
  createdAt DateTime  @default(now())
  members   Member[]

  @@index(ownerId)
}

enum ChannelType {
  textChannel
  categoryChannel
}

model Channel {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  guild       Guild     @relation(fields: [guildId], references: [id])
  guildId     Int       @db.UnsignedInt
  messages    Message[]
  name        String    @db.VarChar(64)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  position    Int
  parentId    Int?
  type        ChannelType
  ratelimit   Int       @default(0)

  @@unique([guildId, name], name: "channel_name_unique_per_guild_constraint")
  @@unique([guildId, position], name: "channel_position_unique_per_guild_constraint")
  @@index(guildId)
}

model Message {
  id            BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  channelId     Int     @db.UnsignedInt
  channel       Channel @relation(fields: [channelId], references: [id])
  content       String  @db.VarChar(4096)
  authorId      Int     @db.UnsignedInt
  referenceId   Int?    @db.UnsignedInt
  attachmentUrl String? @db.VarChar(2048)

  @@index(channelId)
}
